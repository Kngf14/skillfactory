from random import randint

# Классы:
# 1. Внутренняя логика игры - корабли, игровая доска (и вся логика)
# Исключения:
class BoardException(Exception):
    pass
class BoardOutException(BoardException):
    def __str__(self):
        return "Вы пытаетесь стрелять в клетку за переделами поля"

class BoardUsedException(BoardException):
    def __str__(self):
        return "Вы уже стреляли сюда"

class BoardWrongShipException(BoardException):
    pass

# Класс точка:
class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f"Dot({self.x}, {self.y})"

# Класс корабль:
class Ship:
    def __init__(self, long, nose, vect):
        self.long = long
        self.nose = nose
        self.vect = vect
        self.lives = 1
# Длина коробля:
    @property
    def dots(self):
        ship_dots = []
        for i in range(self.nose):
            f_x = self.long.x
            f_y = self.long.y

            if self.vect == 0:
                f_x += i

            elif self.vect == 1:
                f_y += i

            ship_dots.append(Dot(f_x, f_y))

        return ship_dots

    def shooten(self, shot):
        return shot in self.dots

s = Ship(Dot(1, 1), 2, 1)
print(s.shooten(Dot(1, 1)))

# Поле боя
class Board:
    def __init__(self, hid = False, size = 6):
        self.size = size
        self.hid = hid

        self.count = 0

        self.field = [["o"] * size for _ in range(size)]

        self.ships = [] #занятые точки
        self.used = [] #занятые точки(кораблем или стрельбой)

    def __str__(self):
        res = ""
        res += "   1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.field):
            res += f"\n{i + 1} |" + " | ".join(row) + " |"
        if self.hid:
            res = res.replace("■", "o")
        return res

    def out(self, d):
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

# Контур корабля
    def contour(self, ship, verb = False):
        near = [
            (-1, -1), (-1, 0) , (-1, 1),
            (0, -1), (0, 0) , (0 , 1),
            (1, -1), (1, 0) , (1, 1)
        ]
        for d in ship.dots:
            for dx, dy in near:
                cur = Dot(d.x + dx, d.y + dy)
                if not (self.out(cur)) and cur not in self.used:
                    if verb:
                        self.field[cur.x][cur.y] = "."
                    self.used.append(cur)

# Добавление корабля на поле боя
    def add_ship(self, ship):
        for d in ship.dots:
            if self.out(d) or d in self.used: #проверка (не выходят ли координаты коробля за границы и не заняты ли координаты)
                raise BoardWrongShipException()
        for d in ship.dots:
            self.field[d.x][d.y] = "■"
            self.used.append(d)

        self.ships.append(ship) #добавляем корабли
        self.contour(ship) #обводим по контуру

    def shot(self, d): # Метод выстрела:
        if self.out(d):
            raise BoardOutException()

        self.used.append(d)

        for ship in self.ships:
            if d in ship.dots:
                ship.lives -= 1
                self.field[d.x][d.y] = "x"
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship, verb=True)
                    print("Корабль уничтожен")
                    return False
                else:
                    print("Корабль ранен")
                    return True

        self.field[d.x][d.y] = "."
        print("Мимо")
        return False

    def begin(self):
        self.busy = []

    def defeat(self):
        return self.count == len(self.ships)

# 2. Внешняя логика игры:
# Класс игрока

class Player:
    def __init__(self, board, enemy):
        self.board = board #доска игрока
        self.enemy = enemy #доска противника

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)

class AI(Player):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        print(f'Ход компьютера: {d.x+1} {d.y+1}')
        return d

class User(Player):
    def ask(self):
        while True:
            cords = input("Твой ход: ").split()

            if len(cords) != 2:
                print("Введите 2 координаты")
                continue

            x, y = cords

            if not(x.isdigit()) or not(y.isdigit()):
                print("Введите числа!")
                continue

            x, y = int(x), int(y)

            return Dot(x-1, y-1)

# Класс игры. Генерация кораблей на поле боя
class Game:
    def try_board(self):
        lens = [3, 2, 2, 1, 1, 1, 1]
        board = Board(size = self.size)
        attempts = 0
        for l in lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l, randint(0,1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board #не факт, что доска будет создана

    def random_board(self): #гарантия создания доски
        board = None
        while board is None:
            board = self.try_board()
        return board

# Создание полей для игрока и компьютера
    def __init__(self, size=6):
        self.size = size
        pl = self.random_board()
        co = self.random_board()
        co.hid = True

        self.ai = AI(co, pl)
        self.us = User(pl, co)

# Приветствие:
    def greet(self):
        print("-------------------")
        print("  Приветсвуем вас  ")
        print("      в игре       ")
        print("    морской бой    ")
        print("-------------------")
        print(" формат ввода: x y ")
        print(" x - номер строки  ")
        print(" y - номер столбца ")

    def print_boards(self):
        print("-" * 20)
        print("Доска игрока:")
        print(self.us.board)
        print("-" * 20)
        print("Доска компьютера:")
        print(self.ai.board)
        print("-" * 20)

# Игровой цикл:
    def loop(self):
        num = 0
        while True:
            self.print_boards()
            if num % 2 == 0:
                print("Ходит пользователь!")
                repeat = self.us.move()
            else:
                print("Ходит компьютер!")
                repeat = self.ai.move()
            if repeat:
                num -= 1

            if self.ai.board.count == 7:
                print("-" * 20)
                print("Пользователь выиграл!")
                break

            if self.us.board.count == 7:
                print("-" * 20)
                print("Компьютер выиграл!")
                break
            num += 1

    def start(self):
        self.greet()
        self.loop()

g = Game()
g.start()
